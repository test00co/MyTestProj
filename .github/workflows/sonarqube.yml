name: Xcode - Build and Analyze

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyse default scheme using xcodebuild command
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default
      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild clean build analyze -scheme "$scheme" -"$filetype_parameter" "$file_to_build" | xcpretty && exit ${PIPESTATUS[0]}
      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Store your SonarQube token in GitHub Secrets
        run: |
          sonar-scanner \
            -Dsonar.projectKey=testiOS \
            -Dsonar.organization=demo2323 \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=. \
            -Dsonar.exclusions="**/*.xcodeproj,**/*.xcworkspace,**/*.swiftdeps,**/*.plist,**/*.framework,**/*.dSYM,**/*.h" \
            -Dsonar.swift.version=5.4  # Replace with the version of Swift you're using
          
      - name: Post PR comment if analysis fails
        if: failure()
        run: |
          COMMENT_BODY="SonarQube analysis failed. Please check the SonarQube dashboard for more details."
          PR_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            $PR_URL
